#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                                                       &kp Y     &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G                   &kp C_STOP_EJECT            &kp CAPSLOCK            &kp H     &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B                   &kp LEFT_SHIFT              &kp RIGHT_SHIFT         &kp N     &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 6 LANG2  &lt_to_layer_0 6 SPACE  &lt_to_layer_0 5 LANG1      &lt_to_layer_0 2 ENTER  &kp BSPC                             &kp NON_US_BACKSLASH
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOLUME_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &kp F1    &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13   &kp F6    &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans    &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &mkp MB4  &mkp MB5                          &kp F12
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                           &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9   &kp NUMBER_0
&kp F1          &kp F2        &kp F3        &kp F4        &kp F5          &kp F6         &kp F7  &kp F8        &kp F9        &kp F10       &kp F11        &kp F12
&kp LEFT_SHIFT  &trans        &trans        &trans        &kp UP_ARROW    &trans         &trans  &kp EQUAL     &kp LBRC      &kp RBRC      &kp BACKSLASH  &trans
&trans          &trans        &trans        &kp LEFT      &kp DOWN_ARROW  &kp RIGHT      &trans  &kp TAB                                                  &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP K_VOLUME_DOWN>;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &mkp MB1  &mkp MB2                                                &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans    &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans      &mkp MB1  &mkp MB2                                                &bt BT_CLR_ALL
            >;
        };

        layer_6 {
            bindings = <
&kp GRAVE  &trans  &trans  &trans  &trans                           &kp MINUS  &kp EQUAL  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&trans     &trans  &trans  &trans  &trans  &trans      &trans       &trans     &trans     &kp SEMI          &kp SQT            &kp ENTER
&trans     &trans  &trans  &trans  &trans  &trans      &bootloader  &trans     &kp COMMA  &kp PERIOD        &kp FSLH           &kp RSHFT
&trans     &trans  &trans  &trans  &trans  &trans      &mkp MB4     &mkp MB5                                                   &bt BT_CLR_ALL
            >;
        };
    };
};
